// Galería con efecto de scroll horizontal
const gallery = document.querySelector(".scroll-gallery");
const track = document.querySelector(".gallery-track");
let isInView = false;

const galleryObserver = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      isInView = entry.isIntersecting;
    });
  },
  { threshold: 0.1 }
);

if (gallery) {
  galleryObserver.observe(gallery);
}

let animationId;
const handleScroll = () => {
  if (isInView && gallery && track) {
    cancelAnimationFrame(animationId);
    animationId = requestAnimationFrame(() => {
      const offset = Math.max(0, window.scrollY - gallery.offsetTop);
      track.style.transform = `translateX(${-offset / 4}px)`;
    });
  }
};

window.addEventListener("scroll", handleScroll);

// Navbar que se esconde al hacer scroll hacia abajo
const navbar = document.querySelector(".navbar-custom");
let lastScrollTop = 0;
let isScrolling;

const handleNavScroll = () => {
  clearTimeout(isScrolling);
  
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  
  if (scrollTop > lastScrollTop && scrollTop > 100) {
    // Scroll hacia abajo
    navbar.classList.add("hide");
  } else {
    // Scroll hacia arriba
    navbar.classList.remove("hide");
  }
  
  lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
  

};

if (navbar) {
  window.addEventListener("scroll", handleNavScroll);
}

// Añadir clase al navbar cuando se hace scroll
window.addEventListener("scroll", () => {
  if (navbar) {
    if (window.scrollY > 50) {
      navbar.classList.add("scrolled");
    } else {
      navbar.classList.remove("scrolled");
    }
  }
});

// Limpieza de event listeners al desmontar (si es una SPA)
window.addEventListener("beforeunload", () => {
  window.removeEventListener("scroll", handleScroll);
  window.removeEventListener("scroll", handleNavScroll);
  if (gallery) galleryObserver.disconnect();
});