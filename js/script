// Galería con efecto de scroll horizontal
const gallery = document.querySelector(".scroll-gallery");
const track = document.querySelector(".gallery-track");
let isInView = false;

const galleryObserver = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      isInView = entry.isIntersecting;
    });
  },
  { threshold: 0.1 }
);

if (gallery) {
  galleryObserver.observe(gallery);
}

let animationId;
const handleScroll = () => {
  if (isInView && gallery && track) {
    cancelAnimationFrame(animationId);
    animationId = requestAnimationFrame(() => {
      const offset = Math.max(0, window.scrollY - gallery.offsetTop);
      track.style.transform = `translateX(${-offset / 4}px)`;
    });
  }
};
const navbar = document.querySelector(".navbar-custom");
let lastScrollTop = 0;
let isScrolling;
let scrollTimeout;

const handleNavScroll = () => {
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

  // Detecta dirección del scroll
  if (scrollTop > lastScrollTop && scrollTop > 100) {
    navbar.classList.add("hide"); // ocultar si bajando
  } else {
    navbar.classList.remove("hide"); // mostrar si subiendo
  }

  // Mostrar de nuevo si deja de hacer scroll (tras 150ms)
  clearTimeout(scrollTimeout);
  scrollTimeout = setTimeout(() => {
    navbar.classList.remove("hide");
  }, 150);

  lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
};

// Agregar eventos
if (navbar) {
  window.addEventListener("scroll", handleNavScroll);

  window.addEventListener("scroll", () => {
    if (window.scrollY > 50) {
      navbar.classList.add("scrolled");
    } else {
      navbar.classList.remove("scrolled");
    }
  });

  // Limpieza si es una SPA
  window.addEventListener("beforeunload", () => {
    window.removeEventListener("scroll", handleNavScroll);
    clearTimeout(scrollTimeout);
  });
}

//animacion de items
const elementos = document.querySelectorAll('.scroll-item');

const observer = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('visible');
    }
  });
}, {
  threshold: 0.3 // Porcentaje de visibilidad antes de activar
});

// Aplicar el observer a cada elemento
elementos.forEach(el => observer.observe(el));